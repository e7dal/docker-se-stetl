# Smart Emission Data Harvester - Stetl config
#
# Pieter Marsman - 2016
#
# This config reads measurements from the RIVM LML SOS Rest API.
# It inserts this data into an influxdb. The progress of harvesting is
# tracked which allows to harvest all data in multiple steps.

# The main Stetl ETL chain
[etl]
chains = input_rivm|progress_tracker|output_influxdb

# Read all history data from CityGIS Sensor REST API
[input_rivm]
class = smartem.harvester.rivmsosinput.RIVMSosInput
url = {rivm_sos_base_url}
output_format = record_array
timeseries_path = %s/
get_data_path = %s/getData?timespan=%s/PT%sH
features = 301,303,307,309,311,377,386,388
request_hours = 240 
progress_query = SELECT * FROM {pg_schema_harvest_rivm}.progress
column_names = id,timestamp,name,last_update
max_proc_time_secs = {max_proc_time_secs}
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_raw}
table = progress
api_interval_secs = {api_interval_secs}

[progress_tracker]
class = smartem.progresstracker.ProgressTracker
input_format = record_array
output_format = record_array
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_harvest_rivm}
table = harvest_rivm_progress
id_key = timestamp
name_key = label
progress_update_query = SELECT {pg_schema_harvest_rivm}.progress_update(%d, character '%s')

# Write records to InfluxDB server
[output_influxdb]
class = smartem.influxdboutput.InfluxDbOutput
input_format = record_array
method = POST
list_fanout = False
content_type = application/x-www-form-urlencoded
host = {influx_host}
port = {influx_port}
database = {influx_se_database}
measurement = {influx_se_measurement_rivm}
tags_map = {{'station': 'station_name', 'component': 'phenomenon_name'}}
fields_map = {{'value': 'value'}}
time_attr = datetime
geohash_map = {{'lat': 'lat', 'lon': 'lon' }}
geohash_field = True
geohash_tag = True
# use default names and precision (12,7) for geohash field and tag
user = {influx_se_writer}
password = {influx_se_writer_password}
output_format = record_array

# for testing/debugging
[output_std]
class = outputs.standardoutput.StandardOutput
