# Smart Emission Data Harvester - Stetl config
#
# Just van den Broecke - 2016
#
# This config reads raw measurements from the CityGIS/Intemo (Whale) Sensor REST API.
# It inserts this data  in Postgres. The progres of harvesting (date/time) is tracked, so this allows to harvest all data
# in multiple steps.
# The measurement data in Postgres is then available for further refinement (validation, aggregation, etc).

# The main Stetl ETL chain
[etl]
chains = input_raw_sensor_timeseries_2|output_postgres_insert,input_raw_sensor_timeseries_1|output_postgres_insert

# [etl]
# chains =  input_raw_sensor_timeseries_2|output_postgres_insert

# Read all history data from CityGIS Sensor REST Whale API
[input_raw_sensor_timeseries_1]
class = smartem.harvester.rawsensortimeseriesinput.RawSensorTimeseriesInput
url = {raw_device_url_1}
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_raw}
max_proc_time_secs = {max_proc_time_secs}
progress_table = harvester_progress
api_interval_secs = {api_interval_secs}
skip_devices = 22,29,36,37,49,53,83,82,85,89,92,102,126,133

# Read all history data from Intemo Sensor REST Whale API
[input_raw_sensor_timeseries_2]
class = smartem.harvester.rawsensortimeseriesinput.RawSensorTimeseriesInput
url = {raw_device_url_2}
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_raw}
max_proc_time_secs = {max_proc_time_secs}
progress_table = harvester_progress
api_interval_secs = {api_interval_secs}
auth = {{ 'type': 'token', 'keyword': 'Bearer', 'token': '{intemo_token}' }}

# for testing/debugging
[output_std]
class = outputs.standardoutput.StandardOutput

# Insert file records
[output_postgres_insert]
class = outputs.dboutput.PostgresInsertOutput
input_format = record_array
host = {pg_host}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_raw}
table = timeseries
key=unique_id
replace=True

