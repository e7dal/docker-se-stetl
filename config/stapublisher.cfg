# Publish refined timeseries data to a remote SensorThings API (STA) - Stetl config
#
# Just van den Broecke - 2016
#
# This config reads refined timeseries measurement records from the refined db
# table and outputs these via HTTP into a remote OGC SensorThings API.

# The main Stetl ETL chain
[etl]
chains = input_refined_ts_db|output_sta
# chains = input_refined_ts_db|output_std

# Query refined timeseries DB table
[input_refined_ts_db]
class = smartem.refineddbinput.RefinedDbInput
host = {pg_host}
port = {pg_port}
database = {pg_database}
user = {pg_user}
password = {pg_password}
schema = {pg_schema_refined}
table = timeseries
max_input_records = {stapublisher_max_input_records}
query = SELECT gid,gid_raw,device_id,device_meta,sensor_meta,name,label,time,value,unit,altitude,ST_X(point) as lon,ST_Y(point) as lat from timeseries WHERE gid > %d AND gid <= %d ORDER BY gid
column_names = gid,gid_raw,device_id,device_meta,sensor_meta,name,label,time,value,unit,altitude,lon,lat
progress_query = SELECT * from etl_progress WHERE worker = 'stapublisher'
progress_update = UPDATE etl_progress SET last_gid = %d, last_update = current_timestamp WHERE worker = 'stapublisher'
output_format = record_array
read_once = True

[output_std]
class = outputs.standardoutput.StandardOutput

# Output sensor data to STA
[output_sta]
class = smartem.publisher.staoutput.STAOutput
host = {sta_host}
port = {sta_port}
path = {sta_path}
user = {sta_user}
password = {sta_password}
method = POST
# content_type = application/json;charset=UTF-8    default
